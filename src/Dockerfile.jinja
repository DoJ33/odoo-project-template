# syntax=docker/dockerfile:1.4

#######################################################################################
# base stage, with the non-python runtime dependencies
#

FROM ghcr.io/acsone/odoo-bedrock:{{ odoo_series }}-py{{ python_version|replace('.', '') }}-latest as base

# Install apt runtime dependencies.
# - postgresql-client for comfort in the shell container and for db dump to work
# - expect to have unbuffer in CI
# - gettext for click-odoo-makepot in CI
RUN set -e \
  && apt update \
  && apt -y upgrade \
  && apt -y install --no-install-recommends \
       postgresql-client \
       expect \
       gettext \
  && apt -y clean \
  && rm -rf /var/lib/apt/lists/*

#######################################################################################
# build dependencies stage, where we download and install requirements-build.txt
#

FROM base as build-deps

# Install git.
RUN set -e \
  && apt update \
  && apt -y upgrade \
  && apt -y install --no-install-recommends \
       git \
       openssh-client \
       python3.9-dev \
       build-essential \
       libpq-dev \
  && apt -y clean \
  && rm -rf /var/lib/apt/lists/*

# Configure ssh.
RUN mkdir $HOME/.ssh \
  && echo "Host github.com\n  StrictHostKeyChecking no" >> $HOME/.ssh/config \
  && echo "PubkeyAcceptedKeyTypes=+ssh-rsa" >> $HOME/.ssh/config

# Configure pip:
# - no cache, to keep layers light
# - use pep517 builds always (no setup.py bdist_wheel)
ENV PIP_NO_CACHE_DIR=1 PIP_USE_PEP517=1

# Download build dependencies to /build-deps.
# --only-binary=:all: is to avoid trying building build dependencies from source
# --no-deps is to make sure we have pinned them all
COPY requirements-build.txt /build-deps/
RUN pip wheel --only-binary=:all: --no-deps --wheel-dir=/build-deps -r /build-deps/requirements-build.txt
# pre-install build dependencies, so we can build without downloading them again
RUN pip install --no-index --no-deps /build-deps/*.whl

#######################################################################################
# build stages, can run in parallel and be cached as independent layers.
# --no-build-isolation is to use the build dependencies we have pre-installed above
# --no-deps is to make sure we have pinned them all
#

FROM build-deps as build-odoo
COPY container/requirements-group-odoo.txt /build/reqs.txt
RUN --mount=type=ssh \
    pip wheel --no-build-isolation --no-deps --wheel-dir=/build -r /build/reqs.txt

FROM build-deps as build-odoo-addons
COPY container/requirements-group-odoo-addons.txt /build/reqs.txt
RUN --mount=type=ssh \
    pip wheel --no-build-isolation --no-deps --wheel-dir=/build -r /build/reqs.txt

FROM build-deps as build-other
COPY container/requirements-group-other.txt /build/reqs.txt
RUN --mount=type=ssh \
    pip wheel --no-build-isolation --no-deps --wheel-dir=/build -r /build/reqs.txt

#######################################################################################
# dependencies stage, installs wheels from build stages on top of other runtime deps.
# This stage basically installs everything we need at runtime, except the app itself.
#

FROM base as dependencies

# Install python dependencies we built in the build stage.
# Use --no-deps and --no-index to be sure to not download anything else.

RUN --mount=type=bind,target=/build,source=/build,from=build-other \
  pip install --no-deps --no-index /build/*.whl

RUN --mount=type=bind,target=/build,source=/build,from=build-odoo \
  pip install --no-deps --no-index /build/*.whl

RUN --mount=type=bind,target=/build,source=/build,from=build-odoo-addons \
  pip install --no-deps --no-index /build/*.whl

# Additional entry point scripts.
COPY ./container/entrypoint-dbbase /odoo/start-entrypoint.d/

#######################################################################################
# runtime stage, installs the app in editable mode, on top of dependencies.
#

FROM dependencies as runtime

# Install the app in editable mode.
# Here we don't use --no-deps but we do use --no-index to be sure that all dependencies
# have been installed before (i.e. they have been pinned in requirements.txt).
COPY . /app
RUN --mount=type=bind,target=/build-deps,source=/build-deps,from=build-deps \
  pip install --no-index --find-links /build-deps --editable /app
